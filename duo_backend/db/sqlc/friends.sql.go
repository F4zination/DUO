// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: friends.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const addFriendRequest = `-- name: AddFriendRequest :one
INSERT INTO friend_requests (requester_id, requestee_id, status)
VALUES ($1, $2, 'pending')
ON CONFLICT (requester_id, requestee_id) DO NOTHING
RETURNING requester_id, requestee_id, status, created_at
`

type AddFriendRequestParams struct {
	RequesterID uuid.UUID `json:"requester_id"`
	RequesteeID uuid.UUID `json:"requestee_id"`
}

func (q *Queries) AddFriendRequest(ctx context.Context, arg AddFriendRequestParams) (FriendRequest, error) {
	row := q.db.QueryRowContext(ctx, addFriendRequest, arg.RequesterID, arg.RequesteeID)
	var i FriendRequest
	err := row.Scan(
		&i.RequesterID,
		&i.RequesteeID,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const addFriendship = `-- name: AddFriendship :one
INSERT INTO friendships (user1_id, user2_id)
VALUES (
    CASE WHEN $1 < $2 THEN $1 ELSE $2 END,
    CASE WHEN $1 < $2 THEN $2 ELSE $1 END
)
ON CONFLICT (user1_id, user2_id) DO NOTHING
RETURNING user1_id, user2_id
`

type AddFriendshipParams struct {
	Column1 interface{} `json:"column_1"`
	Column2 interface{} `json:"column_2"`
}

func (q *Queries) AddFriendship(ctx context.Context, arg AddFriendshipParams) (Friendship, error) {
	row := q.db.QueryRowContext(ctx, addFriendship, arg.Column1, arg.Column2)
	var i Friendship
	err := row.Scan(&i.User1ID, &i.User2ID)
	return i, err
}

const deleteFriendRequest = `-- name: DeleteFriendRequest :one
DELETE FROM friend_requests
WHERE requester_id = $1 AND requestee_id = $2
RETURNING requester_id, requestee_id, status, created_at
`

type DeleteFriendRequestParams struct {
	RequesterID uuid.UUID `json:"requester_id"`
	RequesteeID uuid.UUID `json:"requestee_id"`
}

func (q *Queries) DeleteFriendRequest(ctx context.Context, arg DeleteFriendRequestParams) (FriendRequest, error) {
	row := q.db.QueryRowContext(ctx, deleteFriendRequest, arg.RequesterID, arg.RequesteeID)
	var i FriendRequest
	err := row.Scan(
		&i.RequesterID,
		&i.RequesteeID,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const deleteFriendship = `-- name: DeleteFriendship :one
DELETE FROM friendships
WHERE CASE WHEN $1 < $2 THEN user1_id ELSE user2_id END = $1
AND CASE WHEN $1 < $2 THEN user2_id ELSE user1_id END = $2
RETURNING user1_id, user2_id
`

type DeleteFriendshipParams struct {
	Column1 interface{} `json:"column_1"`
	Column2 interface{} `json:"column_2"`
}

func (q *Queries) DeleteFriendship(ctx context.Context, arg DeleteFriendshipParams) (Friendship, error) {
	row := q.db.QueryRowContext(ctx, deleteFriendship, arg.Column1, arg.Column2)
	var i Friendship
	err := row.Scan(&i.User1ID, &i.User2ID)
	return i, err
}

const getFriendsByUserId = `-- name: GetFriendsByUserId :many
SELECT user1_id, user2_id FROM friendships
WHERE user1_id = $1 OR user2_id = $1
`

func (q *Queries) GetFriendsByUserId(ctx context.Context, user1ID uuid.UUID) ([]Friendship, error) {
	rows, err := q.db.QueryContext(ctx, getFriendsByUserId, user1ID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Friendship{}
	for rows.Next() {
		var i Friendship
		if err := rows.Scan(&i.User1ID, &i.User2ID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOpenFriendRequestByRequesteeId = `-- name: GetOpenFriendRequestByRequesteeId :many
SELECT requester_id, requestee_id, status, created_at FROM friend_requests
WHERE requestee_id = $1
AND status = 'pending'
`

func (q *Queries) GetOpenFriendRequestByRequesteeId(ctx context.Context, requesteeID uuid.UUID) ([]FriendRequest, error) {
	rows, err := q.db.QueryContext(ctx, getOpenFriendRequestByRequesteeId, requesteeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FriendRequest{}
	for rows.Next() {
		var i FriendRequest
		if err := rows.Scan(
			&i.RequesterID,
			&i.RequesteeID,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFriendRequestStatus = `-- name: UpdateFriendRequestStatus :one
UPDATE friend_requests
SET status = $3
WHERE requester_id = $1 AND requestee_id = $2
RETURNING requester_id, requestee_id, status, created_at
`

type UpdateFriendRequestStatusParams struct {
	RequesterID uuid.UUID `json:"requester_id"`
	RequesteeID uuid.UUID `json:"requestee_id"`
	Status      string    `json:"status"`
}

func (q *Queries) UpdateFriendRequestStatus(ctx context.Context, arg UpdateFriendRequestStatusParams) (FriendRequest, error) {
	row := q.db.QueryRowContext(ctx, updateFriendRequestStatus, arg.RequesterID, arg.RequesteeID, arg.Status)
	var i FriendRequest
	err := row.Scan(
		&i.RequesterID,
		&i.RequesteeID,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}
