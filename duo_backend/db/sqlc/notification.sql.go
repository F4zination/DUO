// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: notification.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const clearNotificationsByUserId = `-- name: ClearNotificationsByUserId :execresult
DELETE FROM notifications WHERE user_id = $1
`

func (q *Queries) ClearNotificationsByUserId(ctx context.Context, userID uuid.UUID) (sql.Result, error) {
	return q.db.ExecContext(ctx, clearNotificationsByUserId, userID)
}

const createNotification = `-- name: CreateNotification :one
INSERT INTO notifications (user_id, message, message_type) VALUES ($1, $2, $3) RETURNING user_id, message, message_type, created_at
`

type CreateNotificationParams struct {
	UserID      uuid.UUID `json:"user_id"`
	Message     string    `json:"message"`
	MessageType string    `json:"message_type"`
}

func (q *Queries) CreateNotification(ctx context.Context, arg CreateNotificationParams) (Notification, error) {
	row := q.db.QueryRowContext(ctx, createNotification, arg.UserID, arg.Message, arg.MessageType)
	var i Notification
	err := row.Scan(
		&i.UserID,
		&i.Message,
		&i.MessageType,
		&i.CreatedAt,
	)
	return i, err
}

const getNotificationsByUserId = `-- name: GetNotificationsByUserId :many
SELECT user_id, message, message_type, created_at FROM notifications WHERE user_id = $1 ORDER BY created_at DESC
`

func (q *Queries) GetNotificationsByUserId(ctx context.Context, userID uuid.UUID) ([]Notification, error) {
	rows, err := q.db.QueryContext(ctx, getNotificationsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Notification{}
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.UserID,
			&i.Message,
			&i.MessageType,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
