// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type Userstatus string

const (
	UserstatusOnline  Userstatus = "online"
	UserstatusInLobby Userstatus = "inLobby"
	UserstatusInGame  Userstatus = "inGame"
	UserstatusOffline Userstatus = "offline"
)

func (e *Userstatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Userstatus(s)
	case string:
		*e = Userstatus(s)
	default:
		return fmt.Errorf("unsupported scan type for Userstatus: %T", src)
	}
	return nil
}

type NullUserstatus struct {
	Userstatus Userstatus `json:"userstatus"`
	Valid      bool       `json:"valid"` // Valid is true if Userstatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserstatus) Scan(value interface{}) error {
	if value == nil {
		ns.Userstatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Userstatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserstatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Userstatus), nil
}

type Duouser struct {
	Uuid       uuid.UUID  `json:"uuid"`
	Username   string     `json:"username"`
	UserStatus Userstatus `json:"user_status"`
	Score      int32      `json:"score"`
	PublicKey  string     `json:"public_key"`
}

type FriendRequest struct {
	RequesterID   uuid.UUID `json:"requester_id"`
	RequesteeID   uuid.UUID `json:"requestee_id"`
	RequesterName string    `json:"requester_name"`
	Status        string    `json:"status"`
	CreatedAt     time.Time `json:"created_at"`
}

type Friendship struct {
	User1ID uuid.UUID `json:"user1_id"`
	User2ID uuid.UUID `json:"user2_id"`
}

type GamePlayerRel struct {
	GameID         int32     `json:"game_id"`
	PlayerID       uuid.UUID `json:"player_id"`
	PlayerPosition int32     `json:"player_position"`
}

type GameStackDrawCardRel struct {
	GameID        int64  `json:"game_id"`
	CardID        string `json:"card_id"`
	StackPosition int32  `json:"stack_position"`
}

type GameStackPlaceCardRel struct {
	GameID        int64  `json:"game_id"`
	CardID        string `json:"card_id"`
	StackPosition int32  `json:"stack_position"`
}

type GameState struct {
	ID               int32          `json:"id"`
	CurrentPlayerID  uuid.UUID      `json:"current_player_id"`
	CardOnTopOfStack sql.NullString `json:"card_on_top_of_stack"`
	OwnerID          uuid.UUID      `json:"owner_id"`
	StackID          uuid.UUID      `json:"stack_id"`
	IsClockwise      bool           `json:"is_clockwise"`
	CreatedAt        time.Time      `json:"created_at"`
}

type Lobby struct {
	ID         int32     `json:"id"`
	OwnerID    uuid.UUID `json:"owner_id"`
	StackID    uuid.UUID `json:"stack_id"`
	MaxPlayers int32     `json:"max_players"`
}

type Notification struct {
	UserID      uuid.UUID `json:"user_id"`
	Message     string    `json:"message"`
	MessageType string    `json:"message_type"`
	CreatedAt   time.Time `json:"created_at"`
}

type UserLogin struct {
	UserUuid  uuid.UUID `json:"user_uuid"`
	Challenge string    `json:"challenge"`
	LoginTime time.Time `json:"login_time"`
}
