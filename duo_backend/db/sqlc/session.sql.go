// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: session.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createLobby = `-- name: CreateLobby :one
INSERT INTO lobby (owner_id, max_players) VALUES ($1, $2) RETURNING id, owner_id, max_players
`

type CreateLobbyParams struct {
	OwnerID    uuid.UUID `json:"owner_id"`
	MaxPlayers int32     `json:"max_players"`
}

func (q *Queries) CreateLobby(ctx context.Context, arg CreateLobbyParams) (Lobby, error) {
	row := q.db.QueryRowContext(ctx, createLobby, arg.OwnerID, arg.MaxPlayers)
	var i Lobby
	err := row.Scan(&i.ID, &i.OwnerID, &i.MaxPlayers)
	return i, err
}

const deleteLobbyByID = `-- name: DeleteLobbyByID :one
DELETE FROM lobby WHERE id = $1 RETURNING id, owner_id, max_players
`

func (q *Queries) DeleteLobbyByID(ctx context.Context, id int32) (Lobby, error) {
	row := q.db.QueryRowContext(ctx, deleteLobbyByID, id)
	var i Lobby
	err := row.Scan(&i.ID, &i.OwnerID, &i.MaxPlayers)
	return i, err
}

const getLobbyByID = `-- name: GetLobbyByID :one
SELECT id, owner_id, max_players FROM lobby WHERE id = $1
`

func (q *Queries) GetLobbyByID(ctx context.Context, id int32) (Lobby, error) {
	row := q.db.QueryRowContext(ctx, getLobbyByID, id)
	var i Lobby
	err := row.Scan(&i.ID, &i.OwnerID, &i.MaxPlayers)
	return i, err
}

const getLobbyByOwnerUUID = `-- name: GetLobbyByOwnerUUID :one
SELECT id, owner_id, max_players FROM lobby WHERE owner_id = $1
`

func (q *Queries) GetLobbyByOwnerUUID(ctx context.Context, ownerID uuid.UUID) (Lobby, error) {
	row := q.db.QueryRowContext(ctx, getLobbyByOwnerUUID, ownerID)
	var i Lobby
	err := row.Scan(&i.ID, &i.OwnerID, &i.MaxPlayers)
	return i, err
}
