// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: game_state.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const addGameDrawStack = `-- name: AddGameDrawStack :one
INSERT INTO game_stack_draw_card_rel
(game_id, card_id, stack_position)
VALUES
($1, $2, $3)
RETURNING game_id, card_id, stack_position
`

type AddGameDrawStackParams struct {
	GameID        int64  `json:"game_id"`
	CardID        string `json:"card_id"`
	StackPosition int32  `json:"stack_position"`
}

func (q *Queries) AddGameDrawStack(ctx context.Context, arg AddGameDrawStackParams) (GameStackDrawCardRel, error) {
	row := q.db.QueryRowContext(ctx, addGameDrawStack, arg.GameID, arg.CardID, arg.StackPosition)
	var i GameStackDrawCardRel
	err := row.Scan(&i.GameID, &i.CardID, &i.StackPosition)
	return i, err
}

const addGamePlaceStack = `-- name: AddGamePlaceStack :one
INSERT INTO game_stack_place_card_rel
(game_id, card_id, stack_position)
VALUES
($1, $2, $3)
RETURNING game_id, card_id, stack_position
`

type AddGamePlaceStackParams struct {
	GameID        int64  `json:"game_id"`
	CardID        string `json:"card_id"`
	StackPosition int32  `json:"stack_position"`
}

func (q *Queries) AddGamePlaceStack(ctx context.Context, arg AddGamePlaceStackParams) (GameStackPlaceCardRel, error) {
	row := q.db.QueryRowContext(ctx, addGamePlaceStack, arg.GameID, arg.CardID, arg.StackPosition)
	var i GameStackPlaceCardRel
	err := row.Scan(&i.GameID, &i.CardID, &i.StackPosition)
	return i, err
}

const addPlayerToGame = `-- name: AddPlayerToGame :one
INSERT INTO game_player_rel
(game_id, player_id, player_position)
VALUES
($1, $2, $3)
RETURNING game_id, player_id, player_position
`

type AddPlayerToGameParams struct {
	GameID         int32     `json:"game_id"`
	PlayerID       uuid.UUID `json:"player_id"`
	PlayerPosition int32     `json:"player_position"`
}

func (q *Queries) AddPlayerToGame(ctx context.Context, arg AddPlayerToGameParams) (GamePlayerRel, error) {
	row := q.db.QueryRowContext(ctx, addPlayerToGame, arg.GameID, arg.PlayerID, arg.PlayerPosition)
	var i GamePlayerRel
	err := row.Scan(&i.GameID, &i.PlayerID, &i.PlayerPosition)
	return i, err
}

const createGameState = `-- name: CreateGameState :one
INSERT INTO game_state 
(current_player_id, card_on_top_of_stack, is_clockwise, owner_id, stack_id)
VALUES
($1, $2, $3, $4, $5)
RETURNING id, current_player_id, card_on_top_of_stack, owner_id, stack_id, is_clockwise, created_at
`

type CreateGameStateParams struct {
	CurrentPlayerID  uuid.UUID      `json:"current_player_id"`
	CardOnTopOfStack sql.NullString `json:"card_on_top_of_stack"`
	IsClockwise      bool           `json:"is_clockwise"`
	OwnerID          uuid.UUID      `json:"owner_id"`
	StackID          uuid.UUID      `json:"stack_id"`
}

func (q *Queries) CreateGameState(ctx context.Context, arg CreateGameStateParams) (GameState, error) {
	row := q.db.QueryRowContext(ctx, createGameState,
		arg.CurrentPlayerID,
		arg.CardOnTopOfStack,
		arg.IsClockwise,
		arg.OwnerID,
		arg.StackID,
	)
	var i GameState
	err := row.Scan(
		&i.ID,
		&i.CurrentPlayerID,
		&i.CardOnTopOfStack,
		&i.OwnerID,
		&i.StackID,
		&i.IsClockwise,
		&i.CreatedAt,
	)
	return i, err
}

const deleteGameState = `-- name: DeleteGameState :one
DELETE FROM game_state WHERE id = $1 RETURNING id, current_player_id, card_on_top_of_stack, owner_id, stack_id, is_clockwise, created_at
`

func (q *Queries) DeleteGameState(ctx context.Context, id int32) (GameState, error) {
	row := q.db.QueryRowContext(ctx, deleteGameState, id)
	var i GameState
	err := row.Scan(
		&i.ID,
		&i.CurrentPlayerID,
		&i.CardOnTopOfStack,
		&i.OwnerID,
		&i.StackID,
		&i.IsClockwise,
		&i.CreatedAt,
	)
	return i, err
}

const getGameDrawStack = `-- name: GetGameDrawStack :many
SELECT game_id, card_id, stack_position FROM game_stack_draw_card_rel WHERE game_id = $1
`

func (q *Queries) GetGameDrawStack(ctx context.Context, gameID int64) ([]GameStackDrawCardRel, error) {
	rows, err := q.db.QueryContext(ctx, getGameDrawStack, gameID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GameStackDrawCardRel{}
	for rows.Next() {
		var i GameStackDrawCardRel
		if err := rows.Scan(&i.GameID, &i.CardID, &i.StackPosition); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGamePlaceStack = `-- name: GetGamePlaceStack :many
SELECT game_id, card_id, stack_position FROM game_stack_place_card_rel WHERE game_id = $1
`

func (q *Queries) GetGamePlaceStack(ctx context.Context, gameID int64) ([]GameStackPlaceCardRel, error) {
	rows, err := q.db.QueryContext(ctx, getGamePlaceStack, gameID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GameStackPlaceCardRel{}
	for rows.Next() {
		var i GameStackPlaceCardRel
		if err := rows.Scan(&i.GameID, &i.CardID, &i.StackPosition); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGameStateById = `-- name: GetGameStateById :one
SELECT id, current_player_id, card_on_top_of_stack, owner_id, stack_id, is_clockwise, created_at FROM game_state WHERE id = $1
`

func (q *Queries) GetGameStateById(ctx context.Context, id int32) (GameState, error) {
	row := q.db.QueryRowContext(ctx, getGameStateById, id)
	var i GameState
	err := row.Scan(
		&i.ID,
		&i.CurrentPlayerID,
		&i.CardOnTopOfStack,
		&i.OwnerID,
		&i.StackID,
		&i.IsClockwise,
		&i.CreatedAt,
	)
	return i, err
}

const getPlayersGameId = `-- name: GetPlayersGameId :one
SELECT game_id, player_id, player_position FROM game_player_rel WHERE player_id = $1
`

func (q *Queries) GetPlayersGameId(ctx context.Context, playerID uuid.UUID) (GamePlayerRel, error) {
	row := q.db.QueryRowContext(ctx, getPlayersGameId, playerID)
	var i GamePlayerRel
	err := row.Scan(&i.GameID, &i.PlayerID, &i.PlayerPosition)
	return i, err
}

const getPlayersInGame = `-- name: GetPlayersInGame :many
SELECT game_id, player_id, player_position FROM game_player_rel WHERE game_id = $1
`

func (q *Queries) GetPlayersInGame(ctx context.Context, gameID int32) ([]GamePlayerRel, error) {
	rows, err := q.db.QueryContext(ctx, getPlayersInGame, gameID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GamePlayerRel{}
	for rows.Next() {
		var i GamePlayerRel
		if err := rows.Scan(&i.GameID, &i.PlayerID, &i.PlayerPosition); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeGameDrawStack = `-- name: RemoveGameDrawStack :one
DELETE FROM game_stack_draw_card_rel WHERE game_id = $1 AND card_id = $2 AND stack_position = $3 RETURNING game_id, card_id, stack_position
`

type RemoveGameDrawStackParams struct {
	GameID        int64  `json:"game_id"`
	CardID        string `json:"card_id"`
	StackPosition int32  `json:"stack_position"`
}

func (q *Queries) RemoveGameDrawStack(ctx context.Context, arg RemoveGameDrawStackParams) (GameStackDrawCardRel, error) {
	row := q.db.QueryRowContext(ctx, removeGameDrawStack, arg.GameID, arg.CardID, arg.StackPosition)
	var i GameStackDrawCardRel
	err := row.Scan(&i.GameID, &i.CardID, &i.StackPosition)
	return i, err
}

const removeGamePlaceStack = `-- name: RemoveGamePlaceStack :one
DELETE FROM game_stack_place_card_rel WHERE game_id = $1 AND card_id = $2 AND stack_position = $3 RETURNING game_id, card_id, stack_position
`

type RemoveGamePlaceStackParams struct {
	GameID        int64  `json:"game_id"`
	CardID        string `json:"card_id"`
	StackPosition int32  `json:"stack_position"`
}

func (q *Queries) RemoveGamePlaceStack(ctx context.Context, arg RemoveGamePlaceStackParams) (GameStackPlaceCardRel, error) {
	row := q.db.QueryRowContext(ctx, removeGamePlaceStack, arg.GameID, arg.CardID, arg.StackPosition)
	var i GameStackPlaceCardRel
	err := row.Scan(&i.GameID, &i.CardID, &i.StackPosition)
	return i, err
}

const removePlayerFromGame = `-- name: RemovePlayerFromGame :one
DELETE FROM game_player_rel WHERE game_id = $1 AND player_id = $2 RETURNING game_id, player_id, player_position
`

type RemovePlayerFromGameParams struct {
	GameID   int32     `json:"game_id"`
	PlayerID uuid.UUID `json:"player_id"`
}

func (q *Queries) RemovePlayerFromGame(ctx context.Context, arg RemovePlayerFromGameParams) (GamePlayerRel, error) {
	row := q.db.QueryRowContext(ctx, removePlayerFromGame, arg.GameID, arg.PlayerID)
	var i GamePlayerRel
	err := row.Scan(&i.GameID, &i.PlayerID, &i.PlayerPosition)
	return i, err
}

const updateGameState = `-- name: UpdateGameState :one
UPDATE game_state
SET
    current_player_id = COALESCE($2, current_player_id),
    card_on_top_of_stack = COALESCE($3, card_on_top_of_stack),
    is_clockwise = COALESCE($4, is_clockwise)
WHERE id = $1
RETURNING id, current_player_id, card_on_top_of_stack, owner_id, stack_id, is_clockwise, created_at
`

type UpdateGameStateParams struct {
	ID               int32          `json:"id"`
	CurrentPlayerID  uuid.NullUUID  `json:"current_player_id"`
	CardOnTopOfStack sql.NullString `json:"card_on_top_of_stack"`
	IsClockwise      sql.NullBool   `json:"is_clockwise"`
}

func (q *Queries) UpdateGameState(ctx context.Context, arg UpdateGameStateParams) (GameState, error) {
	row := q.db.QueryRowContext(ctx, updateGameState,
		arg.ID,
		arg.CurrentPlayerID,
		arg.CardOnTopOfStack,
		arg.IsClockwise,
	)
	var i GameState
	err := row.Scan(
		&i.ID,
		&i.CurrentPlayerID,
		&i.CardOnTopOfStack,
		&i.OwnerID,
		&i.StackID,
		&i.IsClockwise,
		&i.CreatedAt,
	)
	return i, err
}
